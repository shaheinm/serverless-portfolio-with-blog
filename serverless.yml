service: portfolio-api

provider:
  name: aws
  region: us-east-1
  runtime: nodejs6.10
  profile: myAws

custom:
  stage: ${opt:stage, self:provider.stage}
  secrets: ${file(secrets.yml):${self:custom.stage}}

functions:
  listPosts:
    handler: api/posts/list.listPosts
    events:
      - http:
          path: api/posts
          method: get
          integration: lambda
          cors: true
    environment:
      DYNAMODB_TABLE: ${self:custom.secrets.DYNAMODB_TABLE}
  getPost:
    handler: api/posts/get.getPost
    events:
      - http:
          path: api/posts/{id}
          method: get
          integration: lambda
          cors: true
    environment:
      DYNAMODB_TABLE: ${self:custom.secrets.DYNAMODB_TABLE}
  auth:
    handler: api/auth.authorize
    environment:
      COGNITO_ISS: ${self:custom.secrets.COGNITO_ISS}
  postPosts:
    handler: api/posts/create.createPost
    events:
      - http:
          path: api/posts
          method: post
          authorizer: auth
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
    environment:
      DYNAMODB_TABLE: ${self:custom.secrets.DYNAMODB_TABLE}
  updatePost:
    handler: api/posts/update.updatePost
    events:
      - http:
          path: api/posts/{id}
          method: put
          authorizer: auth
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
    environment:
      DYNAMODB_TABLE: ${self:custom.secrets.DYNAMODB_TABLE}
  deletePost:
    handler: api/posts/delete.deletePost
    events:
      - http:
          path: api/posts/{id}
          method: delete
          authorizer: auth
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
    environment:
      DYNAMODB_TABLE: ${self:custom.secrets.DYNAMODB_TABLE}

resources:
  Resources:
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.secrets.DYNAMODB_TABLE}